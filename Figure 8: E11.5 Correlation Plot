## Figure 8: Extract transcript counts for each sample for correlation plots----

log2.cpm.filtered.norm.df.pivot <- log2.cpm.filtered.norm.df.pivot %>%
  filter(geneID != "" & !is.na(geneID)) # Remove rows where geneID is empty or NA

pivoted_data <- log2.cpm.filtered.norm.df.pivot %>%
  pivot_wider(names_from = geneID, values_from = expression)

merged_data <- left_join(pivoted_data, targets, by = "name") #merge transcript counts with study design data

write.csv(merged_data, file = "/location/filename.csv", row.names = FALSE)

d <- read_csv("filename.csv") #read in transcript count/study design file

## Figure 8a: Rsad2 Correlation plot----

# Subset the data to only exclude rows with NA in the variables you're using
d.rsad2 <- d[complete.cases(d$log10copies.vRNA, d$Rsad2), ]

#Pearson correlation for linear, continuous, raw data
rsad2_pearson <- cor.test(d.rsad2$log10copies.vRNA, d.rsad2$Rsad2, method = "pearson")

# Extract the p-value
rsad2_p_value <- rsad2_pearson$p.value
# Extract the correlation coefficient
rsad2_rho <- rsad2_pearson$estimate

# Plot variables "log10copies.vRNA" and "Rsad2", display rsad2_p_value and rsad2_rho on plot
rsad2 <- ggscatter(d, x = "log10copies.vRNA", y = "Rsad2",
          add = "reg.line",  # Add regression line
          conf.int = TRUE,   # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          ylim = c(8, 10),
          xlim =c(4,7.5)
          ) +
  scale_y_continuous(
      breaks = c(8.0, 8.5, 9.0, 9.5, 10),  # Define the positions of the ticks
      labels = c("8.0", "8.5", "9.0", "9.5", "10"),
      expand = c(0, 0)
  ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Rsad2") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(rsad2_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.99, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(rsad2_p_value < 0.0001, "****", 
                               ifelse(rsad2_p_value < 0.001, "***", 
                                      ifelse(rsad2_p_value < 0.01, "**", 
                                             ifelse(rsad2_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.99, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )


## Figure 8b: Mx1 Correlation plot----
# Subset the data to only exclude rows with NA in the variables you're using
d.mx1 <- d[complete.cases(d$log10copies.vRNA, d$Mx1), ]

#Pearson correlation for linear, continuous, raw data
mx1_pearson <- cor.test(d.mx1$log10copies.vRNA, d.mx1$Mx1, method = "pearson")

# Extract the p-value
mx1_p_value <- mx1_pearson$p.value
# Extract the correlation coefficient
mx1_rho <- mx1_pearson$estimate

# Create the correlation plot with Spearman's rho and p-value
mx1 <- ggscatter(d, x = "log10copies.vRNA", y = "Mx1",
          add = "reg.line", # Add regression line
          conf.int = TRUE, # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          xlim =c(4,7.5),
          ylim =c(3,6)
            ) +
  scale_y_continuous(
              breaks = c(3, 4, 5, 6),  # Define the positions of the ticks
              labels = c("3.0", "4.0", "5.0", "6.0"),
              expand = c(0, 0)
              ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Mx1") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(mx1_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.99, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(mx1_p_value < 0.0001, "****", 
                               ifelse(mx1_p_value < 0.001, "***", 
                                      ifelse(mx1_p_value < 0.01, "**", 
                                             ifelse(mx1_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.99, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )

## Figure 8c: Stat2 Correlation plot----
# Subset the data to only exclude rows with NA in the variables you're using
d.stat2 <- d[complete.cases(d$log10copies.vRNA, d$Stat2), ]

#Pearson correlation for linear, continuous, raw data
stat2_pearson <- cor.test(d.stat2$log10copies.vRNA, d.stat2$Stat2, method = "pearson")

# Extract the p-value
stat2_p_value <- stat2_pearson$p.value
# Extract the correlation coefficient
stat2_rho <- stat2_pearson$estimate

# Create the correlation plot with Spearman's rho and p-value
stat2 <- ggscatter(d, x = "log10copies.vRNA", y = "Stat2",
          add = "reg.line", # Add regression line
          conf.int = TRUE, # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          xlim =c(4,7.5),
          ylim =c(7.5,8.5)
              ) +
  scale_y_continuous(
              breaks = c(7.5, 8, 8.5),  # Define the positions of the ticks
              labels = c("7.5", "8.0", "8.5"),
              expand = c(0, 0)
              ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Stat2") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(stat2_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(stat2_p_value < 0.0001, "****", 
                               ifelse(stat2_p_value < 0.001, "***", 
                                      ifelse(stat2_p_value < 0.01, "**", 
                                             ifelse(stat2_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )

## Figure 8d: Ddx58 Correlation plot----
# Subset the data to only exclude rows with NA in the variables you're using
d.ddx58 <- d[complete.cases(d$log10copies.vRNA, d$ddx58), ]

#Pearson correlation for linear, continuous, raw data
ddx58_pearson <- cor.test(d.ddx58$log10copies.vRNA, d.ddx58$Ddx58, method = "pearson")

# Extract the p-value
ddx58_p_value <- ddx58_pearson$p.value
# Extract the correlation coefficient
ddx58_rho <- ddx58_pearson$estimate

# Create the correlation plot with Spearman's rho and p-value
ddx58 <- ggscatter(d, x = "log10copies.vRNA", y = "Ddx58",
          add = "reg.line", # Add regression line
          conf.int = TRUE, # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          xlim =c(4,7.5),
          ylim =c(7,8.5)
                ) +
  scale_y_continuous(
              breaks = c(7, 7.5, 8, 8.5),  # Define the positions of the ticks
              labels = c("7.0", "7.5", "8.0", "8.5"),
              expand = c(0, 0)
              ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Ddx58") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(ddx58_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(ddx58_p_value < 0.0001, "****", 
                               ifelse(ddx58_p_value < 0.001, "***", 
                                      ifelse(ddx58_p_value < 0.01, "**", 
                                             ifelse(ddx58_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )

## Figure 8e: Ifih1 Correlation plot----
# Subset the data to only exclude rows with NA in the variables you're using
d.ifih1 <- d[complete.cases(d$log10copies.vRNA, d$Ifih1), ]

#Pearson correlation for linear, continuous, raw data
ifih1_pearson <- cor.test(d.ifih1$log10copies.vRNA, d.ifih1$Ifih1, method = "pearson")

# Extract the p-value
ifih1_p_value <- ifih1_pearson$p.value
# Extract the correlation coefficient
ifih1_rho <- ifih1_pearson$estimate

# Create the correlation plot with Spearman's rho and p-value
ifih1 <- ggscatter(d, x = "log10copies.vRNA", y = "Ifih1",
          add = "reg.line", # Add regression line
          conf.int = TRUE, # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          xlim =c(4,7.5),
          ylim =c(6.5,8)
          ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  scale_y_continuous(
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Ifih1") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(ifih1_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(ifih1_p_value < 0.0001, "****", 
                               ifelse(ifih1_p_value < 0.001, "***", 
                                      ifelse(ifih1_p_value < 0.01, "**", 
                                             ifelse(ifih1_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )

## Figure 8f: Tlr3 Correlation plot----
# Subset the data to only exclude rows with NA in the variables you're using
d.tlr3 <- d[complete.cases(d$log10copies.vRNA, d$Tlr3), ]

#Pearson correlation for linear, continuous, raw data
tlr3_pearson <- cor.test(d.tlr3$log10copies.vRNA, d.tlr3$Tlr3, method = "pearson")

# Extract the p-value
tlr3_p_value <- tlr3_pearson$p.value
# Extract the correlation coefficient
tlr3_rho <- tlr3_pearson$estimate

# Create the correlation plot with Spearman's rho and p-value
tlr3 <- ggscatter(d, x = "log10copies.vRNA", y = "Tlr3",
          add = "reg.line", # Add regression line
          conf.int = TRUE, # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          xlim =c(4,7.5),
          ylim =c(0,5)
                ) +
  scale_y_continuous(
              breaks = c(0, 1, 2, 3, 4, 5),  # Define the positions of the ticks
              labels = c("0", "1.0", "2.0", "3.0", "4.0", "5.0"),
              expand = c(0, 0)
              ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Tlr3") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(tlr3_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(tlr3_p_value < 0.0001, "****", 
                               ifelse(tlr3_p_value < 0.001, "***", 
                                      ifelse(tlr3_p_value < 0.01, "**", 
                                             ifelse(tlr3_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )

## Figure 8g: Il1a Correlation plot----
# Subset the data to only exclude rows with NA in the variables you're using
d.il1a <- d[complete.cases(d$log10copies.vRNA, d$Il1a), ]

#Pearson correlation for linear, continuous, raw data
il1a_pearson <- cor.test(d.il1a$log10copies.vRNA, d.il1a$Il1a, method = "pearson")

# Extract the p-value
il1a_p_value <- il1a_pearson$p.value
# Extract the correlation coefficient
il1a_rho <- il1a_pearson$estimate

# Create the correlation plot with Spearman's rho and p-value
il1a <- ggscatter(d, x = "log10copies.vRNA", y = "Il1a",
          add = "reg.line", # Add regression line
          conf.int = TRUE, # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          xlim =c(4,7.5),
          ylim =c(1.5,3)
              ) +
  scale_y_continuous(
              breaks = c(1.5, 2.0, 2.5, 3),  # Define the positions of the ticks
              labels = c("1.5", "2.0", "2.5", "3.0"),
              expand = c(0, 0)
              ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Il1a") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(il1a_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(il1a_p_value < 0.0001, "****", 
                               ifelse(il1a_p_value < 0.001, "***", 
                                      ifelse(il1a_p_value < 0.01, "**", 
                                             ifelse(il1a_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )

## Figure 8h: Actin Correlation plot----
# Subset the data to only exclude rows with NA in the variables you're using
d.actin <- d[complete.cases(d$log10copies.vRNA, d$Actb), ]

#Pearson correlation for linear, continuous, raw data
actin_pearson <- cor.test(d.actin$log10copies.vRNA, d.actin$Actb, method = "pearson")

# Extract the p-value
actin_p_value <- actin_pearson$p.value
# Extract the correlation coefficient
actin_rho <- actin_pearson$estimate

# Create the correlation plot with Spearman's rho and p-value
actin <- ggscatter(d, x = "log10copies.vRNA", y = "Actb",
          add = "reg.line", # Add regression line
          conf.int = TRUE, # Add confidence interval
          color = "challenge", palette = c("royalblue1", "darkorange1", "saddlebrown", "black"), size = 2,
          add.params = list(color = "black", fill = "lightgray"),
          xlim =c(4,7.5),
          ylim =c(11,12)
              ) +
  scale_y_continuous(
              breaks = c(11.0, 11.5, 12.0),  # Define the positions of the ticks
              labels = c("11", "", "12"),
              expand = c(0, 0)
              ) +
  scale_x_continuous(
    breaks = c(4, 5, 6, 7),  # Define the positions of the ticks
    labels = c(4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "blue"),
    axis.text.x = element_text(size = 11, face = "bold", color = "black"),  
    axis.text.y = element_text(size = 11, face = "bold", color = "black"),   
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.x = element_text(size = 12, face = "bold", color = "black"),
    legend.position = "none"  # Removed redundant legend position setting
  ) +
  xlab("log10 ZIKV copies/tissue") +  # Add x-axis label
  ylab("Actin") +
  # Add annotation with Pearson's correlation and p-value as asterisks
  annotation_custom(
    grob = textGrob(
      paste("r = ", format(actin_rho, digits = 3)),  # Fixed paste statement here
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"), 
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  ) +
  annotation_custom(
    grob = textGrob(
      paste("\n", ifelse(actin_p_value < 0.0001, "****", 
                               ifelse(actin_p_value < 0.001, "***", 
                                      ifelse(actin_p_value < 0.01, "**", 
                                             ifelse(actin_p_value < 0.05, "*", "ns"))))),
      x = unit(0.05, "npc"), y = unit(0.95, "npc"), just = c("left", "top"),  # Adjusted y-position
      gp = gpar(fontsize = 7, col = "black", fontface = "bold")
    )
  )


